@implements IDisposable

<form @onsubmit="@SendMessageAsync">
    Message: <input @bind="@message" />
    <button type="submit">Send</button>
</form>

<pre>@log</pre>

@code {

    CancellationTokenSource disposalTokenSource = new CancellationTokenSource();
    ClientWebSocket webSocket = new ClientWebSocket();
    string message = "Hello, websocket!";
    string log = "";

    protected override async Task OnInitializedAsync()
    {
        await webSocket.ConnectAsync(new Uri("ws://localhost:33322/ws/123?v=1.0"), disposalTokenSource.Token);
        _ = ReceiveLoop();
    }

    async Task SendMessageAsync()
    {
        log += $"Sending: {message}\n";
        var dataToSend = new ArraySegment<byte>(Encoding.UTF8.GetBytes(message));
        await webSocket.SendAsync(dataToSend, WebSocketMessageType.Text, true, disposalTokenSource.Token);
    }

    async Task ReceiveLoop()
    {
        var buffer = new ArraySegment<byte>(new byte[1024]);
        while (!disposalTokenSource.IsCancellationRequested)
        {
            var received = await webSocket.ReceiveAsync(buffer, disposalTokenSource.Token);
            if (buffer.Array is not null)
            {
                var receivedAsText = Encoding.UTF8.GetString(buffer.Array, 0, received.Count);
                log += $"Received: {receivedAsText}\n";
                StateHasChanged();
            }
        }
    }

    public void Dispose()
    {
        disposalTokenSource.Cancel();
        _ = webSocket.CloseAsync(WebSocketCloseStatus.NormalClosure, "Bye", CancellationToken.None);
    }

}
